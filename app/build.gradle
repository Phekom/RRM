plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
    id "androidx.navigation.safeargs"
    id "deploygate"
    id "eu.davidea.grabver"
}

versioning {
    // Required (number)
    major 1
    minor 5
    // Optional, force custom patch (number)
    // patch 56
    // Optional (any string)
    // preRelease ""
    // Optional, custom task name to trigger the increase of the versio
}


static def getDate() {
    return new Date().format('yyyy-MM-dd HH-mm-ss')
}

static def safePropertyGetter(Properties properties, String key, String defaultValue) {
    System.out.println(key)
    if (properties.hasProperty(key)) {
        def result = '"' + properties[key] + '"'
        System.out.println(result)
        return result
    }

    return defaultValue
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

android {

    flavorDimensions "default"

    compileSdkVersion compile_version

    // def versionPropsFile =  InputFile("$rootDir/app/version.properties")
    // def localPropsFile = InputFile("$rootDir/local.properties")

    // Build Features

    buildFeatures{
        viewBinding = true
        dataBinding = true
        buildConfig = true
    }

    def versionBuild
    def versionBuildDate
    def appId = "za.co.xisystems.itismaintenance"

    // local properties
    def propertyFile = file(project.rootProject.file("host.properties").toString())
    System.out.println(propertyFile)
    Properties hostProps = new Properties()
    InputStream inputStream = new FileInputStream(propertyFile)
    hostProps.load(inputStream)
    inputStream.close()
    System.out.println(hostProps)

    signingConfigs {
        release {
            storeFile file(project.rootProject.file('release.RRMkey'))
            keyAlias 'rrmkey'
            storePassword 'thecowmakesmoo'
            keyPassword 'thecowmakesmoo'
        }
    }

    def qa_env = hostProps['QA_HOST'].toString()
    def dev_env = hostProps['DEV_HOST'].toString()
//    def xi_env = hostProps['XI_HOST'].toString()
    def prod_env = hostProps['PROD_HOST'].toString()
//    def sdev_env = hostProps['SDEV_HOST'].toString()

    def registerAutoFillTest = safePropertyGetter(hostProps, 'REGISTER_AUTO_FILL_TEST', "false") as Boolean


    archivesBaseName="RRM-${versioning.name}.${versioning.build}-"

    versionBuildDate = getDate()

    defaultConfig {
        applicationId appId
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        vectorDrawables.useSupportLibrary = false
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "false")
        buildConfigField("String", "USERNAME_TEST", '"niebuhrk"')
        buildConfigField("String", "PASSWORD_TEST", '"kallien"')
        buildConfigField("String", "USERNAME_STUB", '"user"')
        buildConfigField("String", "PASSWORD_STUB", '"pass"')
        buildConfigField("String", "PIN_CODE", '"1234"')
        buildConfigField("boolean", "STUB", "false")
        buildConfigField("String", "VERSION_BUILD", "\"${versioning.name} (${versioning.build})\"")
        buildConfigField("String", "VERSION_BUILD_DATE", '"' + versioning.getDate("yyyy/MM/dd") + '"')

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation"  : "$projectDir/schemas".toString(),
                             "room.incremental"     : "true",
                             "room.expandProjection": "false"]

            }
        }
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
            crunchPngs false
        }

        debug {
            // testCoverageEnabled false
            minifyEnabled false
            // useProguard false
            debuggable true
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    productFlavors {
        /*stub {
            splits.abi.enable = false
            splits.density.enable = false
            buildConfigField("boolean", "STUB", "true")
            applicationId appId + ".sub"
            // buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            manifestPlaceholders = [app_name: "RRM-Demo", app_icon: "@mipmap/ic_launcher_demo", HOCKEYAPP_APP_ID: "59d2e5d0f7ac4b28a08c30639089d198"]
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"59d2e5d0f7ac4b28a08c30639089d198\""
            buildConfigField("String", "API_HOST", qa_env)
            // The following configuration limits the "dev" flavor to using
            // English string resources and xxhdpi screen-density resources.
            resConfigs "en", "xxhdpi"
            buildConfigField("String", "USERNAME_TEST", '"stubtest"')
            buildConfigField("String", "PASSWORD_TEST", '"1234"')
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
        }*/

        dev {
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".dev"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Dev", app_icon: "@mipmap/ic_launcher_dev", HOCKEYAPP_APP_ID: ""]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", dev_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"\""
        }

        /*xi {
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".xi"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Xi", app_icon: "@mipmap/ic_launcher_xi", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", xi_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"7b77445b888a411b83ae27491a5bd7c9\""
        }

        sdev { // Sanral Dev
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".sdev"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-SDev", app_icon: "@mipmap/ic_launcher_sdev", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", sdev_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"7b77445b888a411b83ae27491a5bd7c9\""
        }
*/
        qa { // Sanral QA
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".qa"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Qa", app_icon: "@mipmap/ic_launcher_qa", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "false")
            buildConfigField("String", "API_HOST", qa_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"7b77445b888a411b83ae27491a5bd7c9\""
        }

        prod {
            appId = "za.co.nra.itisrrm"
            applicationId appId
            manifestPlaceholders = [app_name: "RRM", app_icon: "@mipmap/ic_launcher", HOCKEYAPP_APP_ID: "722fd7502681497f96d51c26284bc056"]
            buildConfigField("String", "API_HOST", prod_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"722fd7502681497f96d51c26284bc056\""
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        compileOptions.encoding = "UTF-8"
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    dependenciesInfo {
        includeInBundle false
        includeInApk false
    }
}


androidExtensions {
    experimental = true
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // LeakCanary
    // debugImplementation because LeakCanary should only run in debug builds.
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    androidTestImplementation 'androidx.test:rules:1.3.0-rc01'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    debugImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android-androidx:2.4'
    implementation 'com.squareup.leakcanary:plumber-android:2.4'


    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // OkHttpProfiler
    debugImplementation 'com.itkacher.okhttpprofiler:okhttpprofiler:1.0.7'

    // Material
    implementation 'com.google.android.material:material:1.3.0-alpha01'

    // Testing
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'


    // VectorDrawable
    def vectorVersion = "1.1.0"
    implementation "androidx.vectordrawable:vectordrawable:$vectorVersion"
    /* To be able to animate properties of a VectorDrawable, add the following.  Useful for
     * illustration purposes or state changes in response to user events
     */
    implementation "androidx.vectordrawable:vectordrawable-animated:$vectorVersion"

    // Layouts
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"

    // Navigation
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'

    // secure exif from androidx
    implementation 'androidx.exifinterface:exifinterface:1.2.0'

    // sanselan
    implementation 'org.apache.sanselan:sanselan:0.97-incubator'

    def lifecycle_version = "2.2.0"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Annotation processor
    // kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"


    // Recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha04'

    // Cardview
    implementation 'androidx.cardview:cardview:1.0.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    //Glide
    def glideVersion = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"

    //Paging
    implementation 'androidx.paging:paging-runtime:2.1.2'

    //Retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    // Obsolete since retrofit 2.6.0
    // implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.0'

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:2.2.17"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    // Picasso & CropMe
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.github.takusemba:cropme:1.0.6'

    //Location
    implementation 'com.google.android.gms:play-services-location:17.0.0'


    // Icepick
    implementation 'frankiesardo:icepick:3.2.0'
    annotationProcessor 'frankiesardo:icepick-processor:3.2.0'

    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"

    // Better Date-time
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'

    //Kodein Dependency Injection
    implementation 'org.kodein.di:kodein-di-framework-android-core:6.5.5'
    implementation 'org.kodein.di:kodein-di-generic-jvm:6.5.5'
    implementation 'org.kodein.di:kodein-di-framework-android-x:6.5.5'

    // Koin AndroidX Scope features
    // implementation 'org.koin:koin-android:2.0.1'
    // implementation 'org.koin:koin-androidx-viewmodel:2.0.1'

    // TouchImageView
    implementation 'com.github.tntkhang:full-screen-image-view-library:1.1.0'

    //Android  Room
    def room_version = '2.2.5' // alpha06 has bugs

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Groupie
    implementation 'com.xwray:groupie:2.7.0'
    implementation 'com.xwray:groupie-kotlin-android-extensions:2.7.0'
    implementation 'com.xwray:groupie-databinding:2.7.0'

    // preference
    implementation 'androidx.preference:preference-ktx:1.1.1'

    // Networking
    implementation 'com.amitshekhar.android:android-networking:1.0.2'
    implementation 'com.amitshekhar.android:jackson-android-networking:1.0.2'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.11.1'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1'

    implementation 'com.raygun:raygun4android:4.0.1'
    implementation 'org.springframework.android:spring-android-rest-template:2.0.0.M3'

    implementation 'org.apache.sanselan:sanselan:0.97-incubator'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation 'commons-io:commons-io:20030203.000550'

    // implementation 'org.greenrobot:eventbus:3.1.1'

    // Preview Image Collection
    implementation 'com.github.AgnaldoNP:PreviewImageCollection:1.2'

    // GeoLocator
    // implementation 'com.sprotte:Geolocator:1.2.2'

    // AndroidVeil
    implementation "com.github.skydoves:androidveil:1.0.9"

    // DMG Location Utils
    // implementation 'com.github.DMGDesignUK:DmgLocationUtils:v1.0.1'

}

ktlint {
    android.set(true)
    outputColorName.set("RED")
}