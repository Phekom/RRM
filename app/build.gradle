/*
 * Updated by Shaun McDonald on 2021/05/18
 * Last modified on 2021/05/18, 11:09
 * Copyright (c) 2021.  XI Systems  - All rights reserved
 */

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
    id "androidx.navigation.safeargs.kotlin"
    id "deploygate"
    id "eu.davidea.grabver"
}

versioning {
    major 1
    minor 6
    patch 0
}

static def getDate() {
    return new Date().format('yyyy-MM-dd HH-mm-ss')
}

static def safePropertyGetter(Properties properties, String key, String defaultValue) {
    System.out.println(key)
    if (properties.hasProperty(key)) {
        def result = '"' + properties[key] + '"'
        System.out.println(result)
        return result
    }

    return defaultValue
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

android {

    flavorDimensions "default"

    compileSdkVersion compile_version

    // Build Features
    buildFeatures {
        viewBinding = true
        dataBinding = true
        buildConfig = true
    }

    def versionLabel = "${versioning.name}.${versioning.build}"
    def versionBuild = 1
    def versionBuildDate = getDate()
    def appId = "za.co.xisystems.itismaintenance"

    // host properties
    def propertyFile = file(project.rootProject.file("host.properties").toString())
    System.out.println(propertyFile)
    Properties hostProps = new Properties()
    InputStream inputStream = new FileInputStream(propertyFile)
    hostProps.load(inputStream)
    inputStream.close()
    System.out.println(hostProps)

    signingConfigs {
        release {
            storeFile file(project.rootProject.file('release.RRMkey'))
            keyAlias 'rrmkey'
            storePassword 'thecowmakesmoo'
            keyPassword 'thecowmakesmoo'
        }
    }

    def qa_api = hostProps['QA_API'].toString()
    def dev_api = hostProps['DEV_API'].toString()
    def prod_api = hostProps['PROD_API'].toString()

    def registerAutoFillTest = safePropertyGetter(hostProps, 'REGISTER_AUTO_FILL_TEST', "false") as Boolean


    archivesBaseName = "rrm-app"

    versionBuildDate = getDate()

    defaultConfig {
        applicationId appId
        minSdkVersion 23
        targetSdkVersion 31
        versionName "$versionLabel"
        versionCode 1
        vectorDrawables.useSupportLibrary = false
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "false")
        buildConfigField("String", "USERNAME_TEST", '"niebuhrk"')
        buildConfigField("String", "PASSWORD_TEST", '"kallien"')
        buildConfigField("String", "USERNAME_STUB", '"user"')
        buildConfigField("String", "PASSWORD_STUB", '"pass"')
        buildConfigField("String", "PIN_CODE", '"1234"')
        buildConfigField("boolean", "STUB", "false")
        buildConfigField("String", "VERSION_BUILD", "\"$versionBuild\"")
        buildConfigField("String", "VERSION_BUILD_DATE", '"' + versionBuildDate + '"')
        buildConfigField("String", "DNS_CHECK_IP4", "\"dns.google.com\"")
        testHandleProfiling true
        testFunctionalTest true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation"  : "$projectDir/schemas".toString(),
                             "room.incremental"     : "true",
                             "room.expandProjection": "false"]

            }
        }
    }

    buildTypes {

        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
            crunchPngs false
        }

        debug {
            testCoverageEnabled false
            // minifyEnabled false
            // useProguard false
            debuggable true
            crunchPngs true
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            signingConfig signingConfigs.debug
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    productFlavors {
        /*stub {
            splits.abi.enable = false
            splits.density.enable = false
            buildConfigField("boolean", "STUB", "true")
            applicationId appId + ".sub"
            // buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            manifestPlaceholders = [app_name: "RRM-Demo", app_icon: "@mipmap/ic_launcher_demo", HOCKEYAPP_APP_ID: "59d2e5d0f7ac4b28a08c30639089d198"]
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"59d2e5d0f7ac4b28a08c30639089d198\""
            buildConfigField("String", "API_HOST", qa_env)
            // The following configuration limits the "dev" flavor to using
            // English string resources and xxhdpi screen-density resources.
            resConfigs "en", "xxhdpi"
            buildConfigField("String", "USERNAME_TEST", '"stubtest"')
            buildConfigField("String", "PASSWORD_TEST", '"1234"')
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
        }*/

        dev {
            splits.abi.enable = false
            splits.density.enable = false

            applicationId appId + ".dev"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Dev", app_icon: "@mipmap/ic_launcher", HOCKEYAPP_APP_ID: ""]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", dev_api)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"\""
            versionName 'versioning.name'
            targetSdkVersion 30
            minSdkVersion 23
            testFunctionalTest true
            testHandleProfiling true
        }

        /*xi {
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".xi"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Xi", app_icon: "@mipmap/ic_launcher_xi", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", xi_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"7b77445b888a411b83ae27491a5bd7c9\""
        }

        sdev { // Sanral Dev
            splits.abi.enable = false
            splits.density.enable = false
            resConfigs "en", "xxhdpi"

            applicationId appId + ".sdev"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-SDev", app_icon: "@mipmap/ic_launcher_sdev", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "true")
            buildConfigField("String", "API_HOST", sdev_env)
            buildConfigField "String", "HOCKEYAPP_APP_ID", "\"7b77445b888a411b83ae27491a5bd7c9\""
        }
*/
        qa { // Sanral QA
            splits.abi.enable = false
            splits.density.enable = false

            applicationId appId + ".qa"

            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", registerAutoFillTest.toString())
            manifestPlaceholders = [app_name: "RRM-Qa", app_icon: "@mipmap/ic_launcher", HOCKEYAPP_APP_ID: "7b77445b888a411b83ae27491a5bd7c9"]
            buildConfigField("boolean", "REGISTER_AUTO_FILL_TEST", "false")
            buildConfigField("String", "API_HOST", qa_api)
            testFunctionalTest true
            testHandleProfiling true
        }

        prod {
            appId = "za.co.nra.itisrrm"
            applicationId appId
            manifestPlaceholders = [app_name: "RRM", app_icon: "@mipmap/ic_launcher", HOCKEYAPP_APP_ID: "722fd7502681497f96d51c26284bc056"]
            buildConfigField("String", "API_HOST", prod_api)
        }
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true

    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        compileOptions.encoding = "UTF-8"
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

}


androidExtensions {
    experimental = true
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'

    // LeakCanary
    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    debugImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android-androidx:2.7'
    implementation 'com.squareup.leakcanary:plumber-android:2.7'

    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    // Activity
    def activity_version = '1.3.1'

    // Kotlin
    implementation "androidx.activity:activity-ktx:$activity_version"

    // Desugar
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'


    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // OkHttpProfiler
    debugImplementation 'com.itkacher.okhttpprofiler:okhttpprofiler:1.0.7'

    // Deploygate sdk
    implementation 'com.deploygate:sdk:4.3.0'

    // Argon2Kt - security pass 1
    implementation 'com.lambdapioneer.argon2kt:argon2kt:1.3.0'

    // JetSec - security pass 1
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'

    // Material
    implementation 'com.google.android.material:material:1.4.0'

    // Testing
    // Core library
    testImplementation 'androidx.test:core-ktx:1.4.0'

    // Robolectric allows device test to run on the JVM
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // TODO: Mock api response unit tests
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.2.1'


    // VectorDrawable
    def vectorVersion = "1.1.0"
    implementation "androidx.vectordrawable:vectordrawable:$vectorVersion"
    /* To be able to animate properties of a VectorDrawable, add the following.  Useful for
     * illustration purposes or state changes in response to user events
     */
    implementation "androidx.vectordrawable:vectordrawable-animated:$vectorVersion"

    // Layouts
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"

    // Navigation
    def nav_version = '2.3.5'

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"


    // secure exif from androidx
    implementation 'androidx.exifinterface:exifinterface:1.3.3'

    // sanselan
    implementation 'org.apache.sanselan:sanselan:0.97-incubator'

    def lifecycle_version = '2.3.1'
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel

    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Annotation processor
    // kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"


    // Recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Cardview
    implementation 'androidx.cardview:cardview:1.0.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.7'

    //Glide
    def glideVersion = '4.12.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //Paging
    implementation 'androidx.paging:paging-runtime-ktx:3.0.1'

    //Retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    // Obsolete since retrofit 2.6.0
    // implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    // implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2'

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    // Picasso & CropMe
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.github.takusemba:cropme:2.0.8'

    //Location
    implementation 'com.google.android.gms:play-services-location:18.0.0'


    // Icepick
    implementation 'frankiesardo:icepick:3.2.0'
    annotationProcessor 'frankiesardo:icepick-processor:3.2.0'


    def coroutines = '1.5.1'
    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"

    // testImplementation for pure JVM unit tests
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    // androidTestImplementation for Android instrumentation tests
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"

    // Better Date-time
    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.1'
    // implementation 'org.threeten:threetenbp:1.5.0'

    //Kodein Dependency Injection
    implementation 'org.kodein.di:kodein-di-framework-android-x:7.6.0'

    // Koin AndroidX Scope features
    // implementation 'org.koin:koin-android:2.0.1'
    // implementation 'org.koin:koin-androidx-viewmodel:2.0.1'

    // TouchImageView
    implementation 'com.github.tntkhang:full-screen-image-view-library:1.1.0'

    //Android  Room
    def room_version = '2.3.0' // align with Roomigrant

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    // Roomigrant
    implementation 'com.github.MatrixDev.Roomigrant:RoomigrantLib:0.3.4'
    kapt 'com.github.MatrixDev.Roomigrant:RoomigrantCompiler:0.3.4'


    // Groupie
    def groupie_version = "2.9.0"

    implementation "com.xwray:groupie:$groupie_version"
    implementation "com.xwray:groupie-kotlin-android-extensions:$groupie_version"
    implementation "com.xwray:groupie-viewbinding:$groupie_version"

    // implementation 'com.xwray:groupie-databinding:2.8.0'

    // preference
    implementation 'androidx.preference:preference-ktx:1.1.1'

    // Networking
    // implementation 'com.amitshekhar.android:android-networking:1.0.2'
    // implementation 'com.amitshekhar.android:jackson-android-networking:1.0.2'

    // Jackson
    def jackson_version = '2.12.4'
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"

    implementation 'com.raygun:raygun4android:4.0.1'
    // implementation 'org.springframework.android:spring-android-rest-template:2.0.0.M3'

    implementation 'org.apache.sanselan:sanselan:0.97-incubator'

    // implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    // implementation 'commons-io:commons-io:20030203.000550'

    // implementation 'org.greenrobot:eventbus:3.1.1'

    // Preview Image Collection
    implementation 'com.github.AgnaldoNP:PreviewImageCollection:1.2'

    // GeoLocator
    // implementation 'com.sprotte:Geolocator:1.2.2'

    // AndroidVeil
    implementation 'com.github.skydoves:androidveil:1.1.1'

    // ProgressView
    implementation 'com.github.skydoves:progressview:1.1.2'

    // coroutines permissions management
    // implementation 'com.sagar:coroutinespermission:2.0.2'

    // androidx runtime permissions handler
    implementation 'com.permissionx.guolindev:permissionx:1.3.0'

    // DMG Location Utils
    // implementation 'com.github.DMGDesignUK:DmgLocationUtils:v1.0.1'

    // Progress dialog drop in replacement
    implementation 'com.github.razir.progressbutton:progressbutton:2.1.0'

    // Lottie Animations
    def lottieVersion = '4.0.0'
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Motion Toast
    def motionToastVersion = "1.3.3.4"
    implementation "com.github.Spikeysanju:MotionToast:$motionToastVersion"

    // Animatoo
    implementation 'com.github.mohammadatif:Animatoo:master'

    // NetworkResponseAdapter
    implementation "com.github.haroldadmin:NetworkResponseAdapter:4.0.1"


    implementation "org.springframework.android:spring-android-core:2.0.0.M3"
    // implementation 'org.springframework.android:spring-android-auth:1.0.1.RELEASE'

    // implementation "com.ToxicBakery.library.bcrypt:bcrypt:1.0.9"

    // Jetpack Security
    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    // Argon2Kt - security pass 1
    implementation 'com.lambdapioneer.argon2kt:argon2kt:1.3.0'
    implementation 'com.getkeepsafe.relinker:relinker:1.4.4'

    // Password4J - security pass 2
    implementation 'com.password4j:password4j:1.5.3'

    // SQLCipher - Encrypts database at rest
    implementation 'net.zetetic:android-database-sqlcipher:4.4.3'
    implementation "androidx.sqlite:sqlite-ktx:2.1.0"

    // Apache Commons Text - for generating random pass phrases
    implementation 'org.apache.commons:commons-text:1.9'

    // More random pass phrase generating goodness
    implementation 'org.passay:passay:1.6.1'

    // TooLargeTool
    debugImplementation 'com.gu.android:toolargetool:0.3.0@aar'

    // Kotlin style Timber
    implementation 'com.github.ajalt:timberkt:1.5.1'

    // signature oad
    // implementation 'com.github.gcacace:signature-pad:1.3.1'

    // Security pass 3 - pin edit view
    implementation 'com.github.poovamraj:PinEditTextField:1.2.6'

}

ktlint {
    android.set(true)
    outputColorName.set("RED")
}